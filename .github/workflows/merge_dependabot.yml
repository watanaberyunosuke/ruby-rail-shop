name: Auto-Merge Dependabot PRs

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.event.pull_request.user.login == 'dependabot[bot]'

    steps:
      - name: Check PR Mergeability
        id: check_merge
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if (!context.payload.pull_request) {
              core.setFailed('No pull request context found.');
            }
            
            const prNumber = context.payload.pull_request.number;
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            if (!pullRequest.mergeable || pullRequest.mergeable_state !== 'clean') {
              core.setFailed('PR is not mergeable.');
            }

      - name: Merge PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if (!context.payload.pull_request) {
              core.setFailed('No pull request context found.');
            }

            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              merge_method: 'merge'
            });

      - name: Delete Branch
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if (!context.payload.pull_request) {
              core.setFailed('No pull request context found.');
            }

            const pr = context.payload.pull_request;
            if (pr.head.ref !== 'main') {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${pr.head.ref}`
              });
            }
